# This dockerfile is used to build and test things in CI, and can be ignored by end users.

FROM rust:1.64

ENV GITHUB_CLI_VERSION 2.16.1

ARG CROSS_LINUX
ARG CROSS_MACOS
ARG CROSS_WINDOWS

ARG TARGETARCH

RUN apt-get update

# Install protobuf compiler and other handy utils
RUN apt-get install -y protobuf-compiler jq zip

# # Install release-plz to help automate version bumping
# RUN cargo install release-plz --locked

# # install the github cli 
# RUN set -ex; \
#     curl -L "https://github.com/cli/cli/releases/download/v${GITHUB_CLI_VERSION}/gh_${GITHUB_CLI_VERSION}_checksums.txt" -o checksums.txt; \
#     curl -OL "https://github.com/cli/cli/releases/download/v${GITHUB_CLI_VERSION}/gh_${GITHUB_CLI_VERSION}_linux_${TARGETARCH}.deb"; \
#     shasum --ignore-missing -a 512 -c checksums.txt; \
# 	  dpkg -i "gh_${GITHUB_CLI_VERSION}_linux_${TARGETARCH}.deb"; \
# 	  rm -rf "gh_${GITHUB_CLI_VERSION}_linux_${TARGETARCH}.deb"; \
#     gh --version;


# Install rust targets for cross compiling for linux (aarch64 and x86_64)
# Also creates /build/cross-env-linux.sh which you need to source when building for linux
RUN if [ ! -z "${CROSS_LINUX}" ]; then \
    apt-get install -y gcc-x86-64-linux-gnu gcc-aarch64-linux-gnu && \
    rustup target add x86_64-unknown-linux-gnu && \
    rustup target add aarch64-unknown-linux-gnu && \
    mkdir -p /build && \
    echo 'export HOST_CC=gcc' > /build/cross-env-linux.sh; \
    echo 'export CC_x86_64_unknown_linux_gnu=/usr/bin/x86_64-linux-gnu-gcc' >> /build/cross-env-linux.sh; \
    echo 'export CC_aarch64_unknown_linux_gnu=/usr/bin/aarch64-linux-gnu-gcc' >> /build/cross-env-linux.sh; \
    echo 'export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc' >> /build/cross-env-linux.sh; \
    echo 'export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/x86_64-linux-gnu-gcc' >> /build/cross-env-linux.sh; \
  fi

# Install osxcross toolchain and mac rust targets
# Also creates /build/cross-env-macos.sh which you need to source when building for macOS
RUN if [ ! -z "${CROSS_MACOS}" ]; then \
    apt-get install -y clang cmake cpio make libssl-dev lzma-dev libxml2-dev && \
    rustup target add x86_64-apple-darwin && \
    rustup target add aarch64-apple-darwin && \
    mkdir -p /build && \
    cd /build && \
    git clone --depth 1 https://github.com/tpoechtrager/osxcross.git && \
    cd /build/osxcross/tarballs && \
    wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz && \
    cd /build/osxcross && \
    UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh && \
    ln -s /build/osxcross/target/SDK/MacOSX10.11.sdk/System/ /System; \
    echo 'CROSS_BIN=/build/osxcross/target/bin' > /build/cross-env-macos.sh; \
    echo 'export PATH=$PATH:$CROSS_BIN' >> /build/cross-env-macos.sh; \
    echo 'export CC_x86_64_apple_darwin=$CROSS_BIN/x86_64-apple-darwin20.4-clang' >> /build/cross-env-macos.sh; \
    echo 'export CC_aarch64_apple_darwin=$CROSS_BIN/aarch64-apple-darwin20.4-clang' >> /build/cross-env-macos.sh; \
  fi
  
# Install windows targets and toolchain 
RUN if [ ! -z "${CROSS_WINDOWS}" ]; then \
    apt-get install -y gcc-mingw-w64-x86-64 && \
    rustup target add x86_64-pc-windows-gnu; \
  fi

# cargo install a dummy lib to force the crates.io index to update, so we can cache it.
# note that this will fail, since there's nothing to install, but we get the updated
# index as a side effect
RUN cargo install empty-library || true


# Copy to /src
WORKDIR /src
COPY . .
